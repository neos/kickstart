{namespace k=F3\Kickstart\ViewHelpers}<?php
declare(ENCODING = 'utf-8');
namespace {namespace};

/*                                                                        *
<f:format.padding padLength="74"> * This script belongs to the FLOW3 package "{packageKey}".</f:format.padding>*
 *                                                                        *
 * It is free software; you can redistribute it and/or modify it under    *
 * the terms of the GNU General Public License as published by the Free   *
 * Software Foundation, either version 3 of the License, or (at your      *
 * option) any later version.                                             *
 *                                                                        *
 * This script is distributed in the hope that it will be useful, but     *
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHAN-    *
 * TABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General      *
 * Public License for more details.                                       *
 *                                                                        *
 * You should have received a copy of the GNU General Public License      *
 * along with the script.                                                 *
 * If not, see http://www.gnu.org/licenses/gpl.html                       *
 *                                                                        *
 * The TYPO3 project - inspiring people to share!                         *
 *                                                                        */

/**
 * A <k:inflect.humanizeCamelCase>{modelName}</k:inflect.humanizeCamelCase>
 *
 * @version $Id: $
 * @license http://www.gnu.org/licenses/gpl.html GNU General Public License, version 3 or later
 * @scope prototype
 * @entity
 */
class {modelName} {
<f:for each="{fieldDefinitions}" as="fieldDefinition" key="fieldName">
	/**
	 * The <k:inflect.humanizeCamelCase lowercase="true">{fieldName}</k:inflect.humanizeCamelCase>
	 * @var <f:raw>{fieldDefinition.type}</f:raw>
	 */
	protected ${fieldName};
</f:for>
<f:for each="{fieldDefinitions}" as="fieldDefinition" key="fieldName">
	/**
	 * Get the <k:inflect.humanizeCamelCase>{modelName}</k:inflect.humanizeCamelCase>'s <k:inflect.humanizeCamelCase lowercase="true">{fieldName}</k:inflect.humanizeCamelCase>
	 *
	 * @return <f:raw>{fieldDefinition.type}</f:raw> The <k:inflect.humanizeCamelCase>{modelName}</k:inflect.humanizeCamelCase>'s <k:inflect.humanizeCamelCase lowercase="true">{fieldName}</k:inflect.humanizeCamelCase>
	 */
	public function get<k:uppercaseFirst>{fieldName}</k:uppercaseFirst>() {
		return $this->{fieldName};
	}

	/**
	 * Sets this <k:inflect.humanizeCamelCase>{modelName}</k:inflect.humanizeCamelCase>'s <k:inflect.humanizeCamelCase lowercase="true">{fieldName}</k:inflect.humanizeCamelCase>
	 *
	 * @param <f:raw>{fieldDefinition.type}</f:raw> ${fieldName} The <k:inflect.humanizeCamelCase>{modelName}</k:inflect.humanizeCamelCase>'s <k:inflect.humanizeCamelCase lowercase="true">{fieldName}</k:inflect.humanizeCamelCase>
	 * @return void
	 */
	public function set<k:uppercaseFirst>{fieldName}</k:uppercaseFirst>(<f:if condition="{fieldDefinition.typeHint}"><f:raw>{fieldDefinition.typeHint}</f:raw> </f:if>${fieldName}) {
		$this->{fieldName} = ${fieldName};
	}
</f:for>
}
?>