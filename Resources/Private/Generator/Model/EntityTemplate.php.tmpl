{namespace k=TYPO3\Kickstart\ViewHelpers}<?php
namespace {namespace};

/*                                                                        *
<f:format.padding padLength="74"> * This script belongs to the FLOW3 package "{packageKey}".</f:format.padding>*
 *                                                                        *
 *                                                                        */

use TYPO3\FLOW3\Annotations as FLOW3;
use Doctrine\ORM\Mapping as ORM;

/**
 * A <k:inflect.humanizeCamelCase>{modelName}</k:inflect.humanizeCamelCase>
 *
 * @FLOW3\Scope("prototype")
 * @FLOW3\Entity
 */
class {modelName} {
<f:for each="{fieldDefinitions}" as="fieldDefinition" key="fieldName">
	/**
	 * The <k:inflect.humanizeCamelCase lowercase="true">{fieldName}</k:inflect.humanizeCamelCase>
	 * @var {fieldDefinition.type->f:format.raw()}
	 */
	protected ${fieldName};
</f:for>
<f:for each="{fieldDefinitions}" as="fieldDefinition" key="fieldName">
	/**
	 * Get the <k:inflect.humanizeCamelCase>{modelName}</k:inflect.humanizeCamelCase>'s <k:inflect.humanizeCamelCase lowercase="true">{fieldName}</k:inflect.humanizeCamelCase>
	 *
	 * @return {fieldDefinition.type -> f:format.raw()} The <k:inflect.humanizeCamelCase>{modelName}</k:inflect.humanizeCamelCase>'s <k:inflect.humanizeCamelCase lowercase="true">{fieldName}</k:inflect.humanizeCamelCase>
	 */
	public function get<k:uppercaseFirst>{fieldName}</k:uppercaseFirst>() {
		return $this->{fieldName};
	}

	/**
	 * Sets this <k:inflect.humanizeCamelCase>{modelName}</k:inflect.humanizeCamelCase>'s <k:inflect.humanizeCamelCase lowercase="true">{fieldName}</k:inflect.humanizeCamelCase>
	 *
	 * @param {fieldDefinition.type -> f:format.raw()} ${fieldName} The <k:inflect.humanizeCamelCase>{modelName}</k:inflect.humanizeCamelCase>'s <k:inflect.humanizeCamelCase lowercase="true">{fieldName}</k:inflect.humanizeCamelCase>
	 * @return void
	 */
	public function set<k:uppercaseFirst>{fieldName}</k:uppercaseFirst>(<f:if condition="{fieldDefinition.typeHint}">{fieldDefinition.typeHint -> f:format.raw()} </f:if>${fieldName}) {
		$this->{fieldName} = ${fieldName};
	}
</f:for>
}
?>